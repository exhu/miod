revision 2, no pythonic idents, rather traditional curly braces.

reserved words: int, uint, [u]int[8,16,32,64], float32, float64, bool, char, wchar,
  sizeof, ptr, strong, weak, ref, in, inout, enum, const, static, public, private, new, delete, func, cfunc,
  funcptr, cfuncptr


cimport "header.h" {
	cstruct mystruct
	{
		// allows partial specification, e.g. only fields that are used

	}

	cfunc
}


Pointer dereferencing:
ptr[int], strong[int], weak[int] = int[1], i.e. to access value you write varname[0] = 1
you can access structure or class fields both for pointers or value objects by just dot operator.

To allocate an array or to access pointer to bytes as pointer to array, you declare:

ptr[int[]] -- unrestricted array, ptr[int[6]] -- limited size.

strong[int[]] ar = new[int[70]](0)

'public:' | 'private:'

func myfuncname(out int z, inout int y, int k) int, throws {
  if (abc > bbc) ;
  elif (aaa) ;
  else {

  }

  var x = 1
  var uint x = 1, z = 3
  var int[3] x = [1,2,3]
  const cc = 3
  var strong[int] sabc = new[int](3)
  var weak[int] wabc
  var mycls c(initargs),
      ptr[mycls] pc = new[mycls]()

  switch(z) {
   case 3: break
  }

  var ptr[byte] pint = cast[ptr[byte]](ref(x)])

  delete(pc) // frees memory and nulls for ptrs or just nulls strong or weak pointers, compilation error for scope objects


  return 1
}

cfunc myname(args) int, stdcall {

}


interface [T1, ...] myint {
  func myfunc(T1 a, T1 b)
}

@factory // register class in the factory
@properties(pa, pb, pc) // register properties -- creates a table with propname and propsetter/getter pointers
class [T1, ...] myint extends mybase implements a,b,c {
  protected: // default

  private:
    int pa, pb

  public:
    func pc() int {
      return pa+pb;
    }
    
}

struct [entity_type T1] mystruct {
  T1 a,b
}


funcptr name(abc) int, throws
cfuncptr name(abc) int, stdcall
methodptr name(abc) int, throws

alias new_name for typedef


