unit myprog.hello
import c.stdio

const
    scrRect: Rect = {x: 0, y:0, w: 640, h: 480}
    # syntax sugar for structs with only two members:
    myMap: array[Pair] = {"aa": "bb", "ww": "cc"}

type
    Pair = struct
        k, v: String
    ends

    Rect = struct
        x,y,w,h,x2,y2: int
        proc update()
            x2 = x+w
            y2 = y+h
        endp
    ends


    # add static methods to type Rect
    RectPlus = struct_helper(Rect)
        proc add(r: Rect)
            x += r.x
            y += r.y
        endp
    ends

    MyUnion = union
        dw: uint32
        w1, w2: uint16
    endu

    sql = annotation
        table: string
    enda

    field = annotation
        name: string
    enda

    @sql{table:"myt"}
    MyCls = class(Object; Cloneable)
        public
        proc assign(o: MyCls)
           a = o.a
           b = o.b
        endp


        private
        @field{name:"a"}
        a,
        @field{name:"b"}
        b: int

        parent: weak[MyCls]
    endc

    MyClsHelper = class_helper(MyCls)
        public
        proc add(o: MyCls)
            a += o.a
            b += o.b
        endp
    endc


    Map<K, V> = interface
        proc get(k: K): V
        proc set(k: K, v: V)

    endi

    MyColl<K,V> = class(Object; Map)

    endc
        
    MyCollS = MyColl<String, String>

public

proc main()
    printf("Hi! %d\n", [1]);
endp
