unit myprog.hello
import c.stdio

const
    scrRect: Rect = {x: 0, y:0, w: 640, h: 480}
    # syntax sugar for structs with only two members:
    myMap: array<Pair> = {"aa": "bb", "ww": "cc"}

    mybin = 0b1111_1100_0011
    myhex = 0xFFFF_1234
    mysuperstring = """

#[[

long comments

#]]

## documentation comment

var
    dynAr: dynarray<Pair>
    nw: ref<scrRect>

type
    Pair = struct
        k, v: String
    ends

    Updateable = interface
        proc update()
    endi

    ## static interface, i.e. compiler will emit error if update() is not
    ## implemented. Structs support inheritence but no virtuals.
    Rect = struct(Updateable)
        x,y,w,h,x2,y2: int
        proc update()
            x2 = x+w
            y2 = y+h
        endp
    ends


    # add static methods to type Rect
    RectPlus = struct_helper(Rect)
        proc add(r: Rect)
            x += r.x
            y += r.y
        endp
    ends

    MyUnion = union
        dw: uint32
        w1, w2: uint16
    endu

    sql = annotation
        table: string
    enda

    field = annotation
        name: string
    enda

    @sql{table:"myt"}
    MyCls = class(Cloneable)
        public
        proc assign(o: MyCls)
           a = o.a
           b = o.b
        endp


        private
        @field{name:"a"}
        a,
        @field{name:"b"}
        b: int

        parent: weak<MyCls>

        public
        property(pa: int, read: a)
        property(pb: int, write: b, read: b)
        
    endc

    MyClsHelper = class_helper(MyCls)
        public
        proc add(o: MyCls)
            a += o.a
            b += o.b
        endp
    endc


    Map<K, V> = interface
        proc get(k: K): V
        proc set(k: K, v: V)

    endi

    MyColl<K,V> = class(Object; Map)

    endc
        
    MyCollS = MyColl<String, String>

public

cproc printf(fmt: cstring), cvarargs

proc format(fmt: String, args: array<Object>): String
    for i in args do
        

    endf
endp

proc mod(a: int, var b:int)
    b = a+1
endp


proc main()
    printf("Hi! %d\n", [1]);
endp
