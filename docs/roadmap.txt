TODO:

>- _cattr annotations support
    - annotations parsing
        * StringValue
            * ExpressionEval.extractStringFromLiteral

    + ExprNodeData must support series of values, refactor into abstact, type,
    value, items classes.
+ return arrays support
- builtin annotations must share the same code for custom user annotations for
type checks etc.
- do we need ValueTypeId ?
- implement vars
- implement proc definition
    - code blocks

- see moid_support/cruntime/m_object.h
- implement only classes (no interfaces) first to support String:
    - BareObject -- contains nothing (only ref counting)
    - BaseObject -- hashCode(), toString() etc.

- emulate interfaces with .asInstanceOf("class::name") which
creates an object descendant proxy which contains a strong reference to the original?

- remove arrays altogether? NO! make array copy on assignment
- float values
- float casting

- global strings and arrays are statically allocated and initialized
- local strings and arrays are heap allocated

- no global vars initialization support yet
- no struct support yet
+ no fixed sized arrays support

- code generation in miodc

- optional second pass
- update currentSymTable visiting classes, procs/methods, blocks...
- memorize node values and don't visit calculated during second pass (optimization)
- code generation is a separate visitor class not based on SemanticVisitor which
uses data collected during 1st and optional second pass

+ check constAssign for integer/float downgrades
+ implement integer casts
+ second pass necessary only if symbol resolution failed in the first pass?
- replace null with UnknownExprNode, ErrorNode ?
*>- arithmetic expressions
    POSTPONED:- fix promote: it is wrong for immediate values! e.g. a : int8; a = a + 1 (cardinal) -> int32 which is wrong
    + if RuntimeValue then form a new RuntimeValue using .promote method,
    + check instanceof PlusOp etc
    + LessThanOp return BoolValue. etc
    + refactor copypasta on ExpressionEval to abstract iface "apply"




+ proper error reporting with line number, col
+ array type
+ use IntegerType class, write FloatType class

- exclude nstring and nwstring
- think over unit testing techniques e.g. how to implement generic assertEquals etc.

- first visitor declares vars, evals expressions,
    adds imports, triggers imported units parsing,
    marks nodes requiring second pass
- second visitor
    processes nodes marked: declares vars, evals expressions

+ finish UnitParser.java
- class is the only reference type, arrays are copied, allocated from class
    storage, or global storage
- dynamic arrays are allocated via C implementation.
- review grammar
- var a : type -> add symbol table item with resolved 'type' (i.e. bypass alias)

+ refactor parser.expr: ExprNode is not only for expressions

Version 1 features

- constants with literals
- procs with local vars
- visibility levels (public, protected, private)
- structs
- opaque
- unions via opaque
- global vars
- cprocs (@_cattr)
- static packages
- nstring, nwstring

Version 2

- classes
- interfaces
- int32 analogue to System.identityHashCode(Object)
- base_class for extendable classes, deprecate "final" keyword,
include "virtual" keyword
- interfaces
- cmake integration

Version 3

- reference-counted classes with weak pointers and references
- interfaces

Version 4

- dynamic arrays
- Base object class, base interface (interface -> Object instance)
- String class

Version 5

- Generics (auto type-cast) support

Version 6

- generic units support (templates-like engine)

Version 7

- RTL

Version 8

- dynamic packages (sets)


