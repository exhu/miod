TODO:

- Errors handling (get from mycalc1)
- rethink types storage (e.g. MethodWithBody), prefer Enum with Data, rather
  than classes per type


- evaluate expressions during second (semantic) pass both type and values
to calculate static_if's

- check for predefined annotations, unknown annotations trigger error

- track scopes when parsing declarations, no procedure calls are possible
when defining globals constants/vars

- check for double getters and setters for properties

- check for unnecessary body for abstract methods, external procs and omission
otherwise



Version 1 features

- constants with literals
- procs with local vars
- visibility levels (public, protected, private)
- structs
- unions via opaque
- global vars
- cprocs (@_cattr)
- static packages
- cstrings

Version 2

- int32 analogue to System.identityHashCode(Object)
- base_class for extendable classes, deprecate "final" keyword,
include "virtual" keyword
- interfaces
- cmake integration

Version 3

- reference-counted classes with weak pointers and references
- interfaces

Version 4

- dynamic arrays
- Base object class, base interface (interface -> Object instance)
- String class

Version 5

- Generics (auto type-cast) support

Version 6

- generic units support (templates-like engine)

Version 7

- RTL

Version 8

- dynamic packages (sets)


