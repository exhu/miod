Notes on struct implementation
==============================

When structure variable get assigned and gets out of scope, a special
finalization procedure must be called, which decrements refs for class instance
pointers.

Both structs and classes can have a finalization method.


Notes on classes implementation
===============================

Pointer -- a value that can refer to both interface (virtual table)
and class instance.

Instance pointers can be implemented in two ways, via a plain platform-size
pointer (e.g. void*), or via a pair of pointers (e.g. void *interface_vtbl, void *this).

Single pointer implementation
-----------------------------

Pointer value encodes both instance pointer and pointer to virtual table via
pointing to a struct { void *parent_vtable, int parent_fields... 
void *vtable, int fields... }.

Such technique requires *this* pointer adjustment before passing to implemented
methods. 

Pros:
    - simple implementation, i.e. using good old pointers
    - references occupy platform pointer size bytes only

Cons:
    - double indirection to call virtual methods:
        pointer->vtable->mymethod
    - instance data requires additional vtable fields for every ancestor class
    and implemented interface
    - thunk methods to marshall *this* pointer


Details:

- pointers to class instance are simple
- pointers to interfaces require processing:
    - a) the values points to struct { void *vtable; } and requires thunks
    - b) duplicated *this*, i.e. struct { void *vtable; void *this }

The latter variant seems to be the better one performance-wise.

Example implementation:

class Base { int counter; virtual done() }
class Desc(Base, Add, Sub) { int somedata; virtual apply() }
interface Add { int add(int a) }
interface Sub { int sub(int a) }

struct Base {
    void *vtable;
    int counter;
};

struct BaseVtbl {
    void (*done)();
};

struct DescVtbl {
    BaseVtbl base;
    void (*apply)();
};

struct InterfaceData {
    void *vtable;
    void *this;
};

struct Desc {
    struct Base base;
    int somedata;
    // interfaces
    InterfaceData add;
    InterfaceData sub;
}


Double pointer implementation
-----------------------------

Each instance pointer contains a pointer to vtable and pure *this* pointer, i.e.
struct { void *this, void *vtable }


Pros:
    - simple to call virtuals, no pointer conversion
    - simple to implement virtual tables

Cons:
    - *this* occupies two machine words (ancestor implementations need pointer
    to vtable)

-=-=-=--=-=--=-=-




