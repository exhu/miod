apply plugin: 'java'

//jar.enabled = false

dependencies {
    compile 'antlrTool:antlr:4.+:complete'
    //runtime 'antlr:antlr:4.+:complete'
}

configurations {
     // excluded to let link with antl4 gui or bare antlr runtime
    runtime.exclude group:'antlrTool'
}

def genSourcesDir = file("$buildDir/generated-src/org/miod/parser/generated")

task generateSources(type: JavaExec) {
    def lexer = file("grammars/MiodLexer.g4")
    def parser = file("grammars/MiodParser.g4")
    inputs.files(lexer, parser)
    outputs.dir genSourcesDir
    doFirst {
        genSourcesDir.exists() || genSourcesDir.mkdirs()
    }
    // generate using antlr'

    classpath configurations.compile.asPath //antlrJar
    main 'org.antlr.v4.Tool'
    args "-visitor", "-package", "org.miod.parser.generated", "-o", "$genSourcesDir",
        "$lexer", "$parser"
}

compileJava.dependsOn generateSources
sourceSets {
    main {
        java {
            srcDir genSourcesDir
        }
     }
}

task(grun, type: JavaExec, dependsOn: ':lexer_parser:compileJava') {
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.compile.asPath

    main 'org.antlr.v4.gui.TestRig'
    args 'org.miod.parser.generated.Miod',
        'compUnit',
        '-diagnostics',
        '-SLL',
        //'-trace',
        //'-tokens',
        '-gui',
        //file('../parser_core/test_data/pkg1/test0001.miod')
        file('../parser_core/test_data/pkg1/hello_world01.miod')

    doFirst {
      println commandLine
    }
}

