/*
    Copyright 2016 Yury Benesh
    see COPYING.txt
 */
package org.miod.parser;

import java.util.HashMap;
import java.util.Map;
import org.miod.program.CompilationUnit;

/**
 * Maintains all processed units, predefined directives, options etc.
 *
 * @author yur
 */
public final class ParserContext {

    private final Map<String, CompilationUnit> units = new HashMap<>();
    private UnitParserProvider parserProvider;
    private ErrorListener errorListener = null;

    /* Global defines are bad thing
    private Map<String, SymItem> globalDefines = new HashMap<>();
    better way is to have a miod.compiler.config module generated by
    compiler containing platform constants, e.g. debug mode or ref counting,
    cpu etc.
     */
    public ParserContext(UnitParserProvider provider) {
        this.parserProvider = provider;
    }

    public final void setErrorListener(ErrorListener lst) {
        errorListener = lst;
    }

    public final ErrorListener getErrorListener() {
        return errorListener;
    }

    public final void setParserProvider(UnitParserProvider provider) {
        this.parserProvider = provider;
    }

    final public CompilationUnit getUnit(String name) {
        return units.get(name);
    }

    /// unitName = import directive argument e.g. miod::system
    /// check for null return value to handle failure to find the unit
    public CompilationUnit parseUnit(String unitName) {
        CompilationUnit requestedUnit = parserProvider.parseUnit(unitName);
        if (requestedUnit != null) {
            units.put(unitName, requestedUnit);
        }
        
        return requestedUnit;
    }
}
