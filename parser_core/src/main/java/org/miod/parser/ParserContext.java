/*
    Copyright 2016 Yury Benesh
    see COPYING.txt
 */
package org.miod.parser;

import java.util.HashMap;
import java.util.Map;
import org.antlr.v4.runtime.tree.ParseTree;
import org.miod.program.CompilationUnit;
import org.miod.program.symbol_table.DefaultSymbolTable;

/**
 * Maintains all processed units, predefined directives, options etc.
 *
 * @author yur
 */
public final class ParserContext {

    private final Map<String, CompilationUnit> units = new HashMap<>();
    private UnitParserProvider parserProvider;
    private ErrorListener errorListener = null;
    private DefaultSymbolTable defSymbolTablel = new DefaultSymbolTable(null);

    /* Global defines are bad thing
    private Map<String, SymItem> globalDefines = new HashMap<>();
    better way is to have a miod.compiler.config module generated by
    compiler containing platform constants, e.g. debug mode or ref counting,
    cpu etc.
     */
    public ParserContext(UnitParserProvider provider) {
        this.parserProvider = provider;
    }

    public final void setErrorListener(ErrorListener lst) {
        errorListener = lst;
        defSymbolTablel.setErrorListener(lst);
    }

    public final DefaultSymbolTable getDefaultSymbolTable() {
        return defSymbolTablel;
    }

    public final ErrorListener getErrorListener() {
        return errorListener;
    }

    public final void setParserProvider(UnitParserProvider provider) {
        this.parserProvider = provider;
    }

    /// unitName = import directive argument e.g. miod::system
    /// check for null return value to handle failure to find the unit
    public CompilationUnit getOrParseUnit(String unitName) {
        CompilationUnit requestedUnit = units.get(unitName);
        if (requestedUnit != null) {
            return requestedUnit;
        } else {
            parserProvider.parseUnit(unitName);
        }
        // try again
        return units.get(unitName);
    }

    /// used by CompilationUnit to register self
    public void putUnit(String unitName, CompilationUnit unit) {
        if (units.get(unitName) == null) {
            units.put(unitName, unit);
        } else {
            throw new RuntimeException("Unit redefinition for " + unitName);
        }
    }

    public void putTree(String unitName, ParseTree tree) {
        units.get(unitName).tree = tree;
    }
}
